from __future__ import annotations

import os
import time

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton

import config
from handlers.shared import offer_text
from keyboards import main_menu, offer_menu, subscription_menu, diagnostics_offer_menu

router = Router()

# –ê–Ω—Ç–∏—Å–ø–∞–º –ø–æ –∫–ª–∏–∫–∞–º (–≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞)
_last_click: dict[int, float] = {}


async def _send_invoice(bot: Bot, chat_id: int, title: str, amount: int, payload: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Telegram-–∏–Ω–≤–æ–π—Å (–ÆKassa).
    amount ‚Äî –≤ –∫–æ–ø–µ–π–∫–∞—Ö (350 —Ä—É–± -> 35000)
    """
    prices = [LabeledPrice(label=title, amount=amount)]
    await bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=f"{title} –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É",
        payload=payload,
        provider_token=config.PAYMENT_TOKEN or os.getenv("PAYMENT_TOKEN"),
        currency="RUB",
        prices=prices,
        start_parameter=payload,
    )


# --- –ù–∞–∂–∞–ª–∏ "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ" ---
@router.callback_query(F.data == "buy_subscription")
async def offer_handler(callback: CallbackQuery):
    # –ú–µ–Ω—è–µ–º –¢–ï–ö–°–¢ —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Ñ–µ—Ä—Ç—É + –∫–Ω–æ–ø–∫–∏ –æ—Ñ–µ—Ä—Ç—ã
    if callback.message and callback.message.text:
        await callback.message.edit_text(text=offer_text, reply_markup=offer_menu)
    else:
        # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–º
        await callback.message.answer(text=offer_text, reply_markup=offer_menu)
    await callback.answer()


# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π ---
@router.callback_query(F.data == "accept_offer")
async def subscription_handler(callback: CallbackQuery):
    # –í —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤
    if callback.message and callback.message.text:
        await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=subscription_menu)
    else:
        await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=subscription_menu)
    await callback.answer()


# --- –ù–∞–∑–∞–¥ –∏–∑ —Ç–∞—Ä–∏—Ñ–∞ ‚Üí —Å–Ω–æ–≤–∞ –æ—Ñ–µ—Ä—Ç–∞ ---
@router.callback_query(F.data == "back_offer")
async def back_offer_handler(callback: CallbackQuery):
    if callback.message and callback.message.text:
        await callback.message.edit_text(text=offer_text, reply_markup=offer_menu)
    else:
        await callback.message.answer(text=offer_text, reply_markup=offer_menu)
    await callback.answer()


@router.callback_query(lambda c: c.data == "diagnostics_offer")
async def diagnostics_offer_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        text=offer_text,
        reply_markup=diagnostics_offer_menu
    )


@router.callback_query(lambda c: c.data == "accept_diagnostics_offer")
async def accept_diagnostics_offer(callback: CallbackQuery):
    await callback.message.edit_text(
        text="‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –æ—Ñ–µ—Ä—Ç–æ–π.\n\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ª—É–≥\n–õ–µ–≥–µ–Ω–∫–∏–Ω–∞ –ü–æ–ª–∏–Ω–∞ –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", url=config.ADMIN_URL)],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
            ]
        )
    )


# --- –ù–∞–∑–∞–¥ –∏–∑ –æ—Ñ–µ—Ä—Ç—ã ‚Üí –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@router.callback_query(F.data == "back_main")
async def back_main_handler(callback: CallbackQuery):
    if callback.message and callback.message.text:
        await callback.message.edit_text(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
    else:
        await callback.message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
    await callback.answer()


# === –ö–ù–û–ü–ö–ò –¢–ê–†–ò–§–û–í (–û–¢–ü–†–ê–í–ö–ê –ò–ù–í–û–ô–°–û–í) ===

@router.callback_query(F.data.in_({"buy_month", "buy_year"}))
async def buy_plan_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    now = time.time()

    # –ê–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ 10 —Å–µ–∫
    if user_id in _last_click and (now - _last_click[user_id]) < 10:
        await callback.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", show_alert=False)
        return
    _last_click[user_id] = now

    # –ù–∏—á–µ–≥–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if callback.data == "buy_month":
        await _send_invoice(
            bot=callback.message.bot,
            chat_id=user_id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
            amount=35000,  # 350 —Ä—É–±
            payload="month_subscription",
        )
    else:
        await _send_invoice(
            bot=callback.message.bot,
            chat_id=user_id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥",
            amount=400000,  # 4000 —Ä—É–±
            payload="year_subscription",
        )

    await callback.answer("–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
