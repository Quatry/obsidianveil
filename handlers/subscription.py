from __future__ import annotations

import re
from datetime import datetime, timedelta

import logging
import secrets

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import Command

import db
import config
from handlers.shared import offer_text, months, consultation_text, amulet_text, subscription_text
from keyboards import main_menu, subscription_menu, support_keyboard, menu_keyboard, consultation_menu, amulet_menu

router = Router()
logger = logging.getLogger(__name__)


async def safe_edit_or_send(callback: CallbackQuery, text: str, reply_markup):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å edit_text, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if callback.message and callback.message.text:
        try:
            await callback.message.edit_text(text=text, reply_markup=reply_markup)
        except Exception:
            await callback.message.answer(text=text, reply_markup=reply_markup)
    else:
        await callback.message.answer(text=text, reply_markup=reply_markup)
    await callback.answer()


# === –≠—Ç–∞–ø 1. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–µ ===
@router.callback_query(F.data == "buy_subscription")
async def buy_subscription_offer(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_offer:subscription")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    await safe_edit_or_send(callback, offer_text, kb)


@router.callback_query(F.data == "buy_consultation")
async def buy_consultation_offer(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_offer:consultation")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    await safe_edit_or_send(callback, offer_text, kb)


@router.callback_query(F.data == "buy_amulet")
async def buy_amulet_offer(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_offer:amulet")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    await safe_edit_or_send(callback, offer_text, kb)


# === –≠—Ç–∞–ø 2. –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –æ—Ñ–µ—Ä—Ç–æ–π ===
@router.callback_query(F.data.startswith("accept_offer"))
async def accept_offer(callback: CallbackQuery):
    try:
        _, service = callback.data.split(":", 1)
    except ValueError:
        service = "subscription"

    if service == "subscription":
        await callback.message.edit_text(text=subscription_text, reply_markup=subscription_menu)
        await callback.answer()
        return

    if service == "consultation":
        await callback.message.edit_text(text=consultation_text, reply_markup=consultation_menu)
        await callback.answer()
        return

    if service == "amulet":
        await callback.message.edit_text(text=amulet_text, reply_markup=amulet_menu)
        await callback.answer()
        return


# === –≠—Ç–∞–ø 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (pending) ===
@router.callback_query(F.data.startswith("create_pending:"))
async def create_pending_handler(callback: CallbackQuery):
    try:
        _, plan, amount_s = callback.data.split(":", 2)
        amount = int(amount_s)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.", show_alert=True)
        return

    user = callback.from_user
    pid = db.create_pending_payment(user.id, user.username or user.first_name, plan, amount)
    logger.info("Created pending payment %s for user %s plan=%s amount=%s", pid, user.id, plan, amount)

    plan_text = (
        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if plan == "consultation"
        else "–ê–º—É–ª–µ—Ç" if plan == "amulet"
        else "–ü–æ–¥–ø–∏—Å–∫–∞"
    )

    rub = amount / 100
    text = (
        f"üí≥ –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏: <b>{plan_text}</b>\n\n"
        f"üí∞ –°—É–º–º–∞: <b>{rub:.2f}</b> —Ä—É–±.\n\n"
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
        "üîπ –°–±–µ—Ä–±–∞–Ω–∫: <b>40817810403005867172</b>\n"
        "üîπ –ê–ª—å—Ñ–∞: <b>40817810805614823674</b>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
        "2Ô∏è‚É£ –ó–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É\n\n"
        "‚ö†Ô∏è <b>–ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞</b>"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫", callback_data=f"attach_receipt:{pid}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_offer")]
    ])

    try:
        await callback.message.edit_text(text=text, reply_markup=kb)
    except Exception:
        await callback.message.answer(text=text, reply_markup=kb)

    await callback.answer("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚Äî –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫.")


# === –≠—Ç–∞–ø 4. –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —á–µ–∫–∞ ===
@router.callback_query(F.data.startswith("attach_receipt:"))
async def attach_receipt_prompt(callback: CallbackQuery):
    try:
        _, pid = callback.data.split(":", 1)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID –∑–∞—è–≤–∫–∏.")
        return

    db.set_receipt_waiting(callback.from_user.id, pid)

    try:
        await callback.message.edit_text(
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ–∫–æ–º.\n\n"
            "‚ùó –¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è."
        )
    except Exception:
        await callback.message.answer(
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ–∫–æ–º.\n\n"
            "‚ùó –¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è."
        )

    await callback.answer()


# === –≠—Ç–∞–ø 5. –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@router.message(F.photo | F.document)
async def handle_receipt_upload(message: Message):
    user_id = message.from_user.id
    pending = db.get_receipt_waiting(user_id)
    if not pending:
        return

    pid = pending["pid"]
    plan = pending["plan"]

    file_id = message.photo[-1].file_id if message.photo else message.document.file_id

    db.save_receipt_file(pid, file_id)
    db.set_receipt_waiting(user_id, None)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    db.set_contacts_waiting(user_id, pid)

    await message.answer(
        "‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        "üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –∏ üìß <b>Email</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>+79991234567</code>\n<code>example@mail.ru</code>",
        parse_mode="HTML"
    )


# === –≠—Ç–∞–ø 6. –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
@router.message(F.text)
async def handle_contacts(message: Message):
    user_id = message.from_user.id
    pending = db.get_contacts_waiting(user_id)

    if not pending:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

    pid = pending["pid"]
    text = message.text.strip()

    # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    phone = None
    email = None

    lines = text.split('\n')
    for line in lines:
        if '—Ç–µ–ª–µ—Ñ–æ–Ω:' in line.lower() or 'phone:' in line.lower():
            phone = line.split(':', 1)[1].strip()
        elif 'email:' in line.lower() or '–ø–æ—á—Ç–∞:' in line.lower():
            email = line.split(':', 1)[1].strip()

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if not phone or not email:
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        emails = re.findall(email_pattern, text)
        if emails:
            email = emails[0]

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_pattern = r'[\+]?[7|8]?[\s]?[\(]?[0-9]{3}[\)]?[\s]?[0-9]{3}[\s]?[0-9]{2}[\s]?[0-9]{2}'
        phones = re.findall(phone_pattern, text)
        if phones:
            phone = phones[0].strip()

    if not phone or not email:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>+79991234567</code>\n<code>example@mail.ru</code>",
            parse_mode="HTML"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    db.update_payment_contacts(pid, phone, email)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    db.clear_user_state(user_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    pending_data = db.get_payment(pid)
    if pending_data and config.ADMIN_ID:
        plan = pending_data["plan"]
        amount = pending_data["amount"] / 100
        username = pending_data.get("username") or str(user_id)
        plan_text = (
            "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if plan == "consultation"
            else "–ê–º—É–ª–µ—Ç" if plan == "amulet"
            else "–ü–æ–¥–ø–∏—Å–∫–∞"
        )

        admin_text = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É #{pid}\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üì¶ –£—Å–ª—É–≥–∞: <b>{plan_text}</b>\n"
            f"üí∞ –°—É–º–º–∞: <b>{amount:.2f}</b> —Ä—É–±.\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n"
            f"üìß Email: <b>{email}</b>\n\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
        )

        kb_admin = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{pid}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{pid}")
            ],
            [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"tg://user?id={user_id}")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –∞–¥–º–∏–Ω—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if pending_data.get("proof_file_id"):
            try:
                if pending_data["proof_file_id"].startswith("AgAC"):  # —Ñ–æ—Ç–æ
                    await message.bot.send_photo(
                        chat_id=config.ADMIN_ID,
                        photo=pending_data["proof_file_id"],
                        caption=admin_text,
                        reply_markup=kb_admin
                    )
                else:  # –¥–æ–∫—É–º–µ–Ω—Ç
                    await message.bot.send_document(
                        chat_id=config.ADMIN_ID,
                        document=pending_data["proof_file_id"],
                        caption=admin_text,
                        reply_markup=kb_admin
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –∞–¥–º–∏–Ω—É: {e}")
                await message.bot.send_message(
                    chat_id=config.ADMIN_ID,
                    text=admin_text + f"\n\n‚ùå –ß–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}",
                    reply_markup=kb_admin
                )
        else:
            await message.bot.send_message(
                chat_id=config.ADMIN_ID,
                text=admin_text,
                reply_markup=kb_admin
            )

    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ú–∞—Å—Ç–µ—Ä–æ–º. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, "
        "–∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
        reply_markup=menu_keyboard
    )


# === –≠—Ç–∞–ø 7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) ===
@router.callback_query(F.data.startswith("approve:") | F.data.startswith("reject:"))
async def handle_admin_decision(callback: CallbackQuery):
    try:
        action, pid = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ ID.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    pending = db.get_payment(pid)
    if pending and pending["status"] in ["approved", "rejected"]:
        await callback.answer("–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return

    approved = action == "approve"
    db.set_payment_status(pid, "approved" if approved else "rejected")

    text = (
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω." if approved
        else "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω."
    )

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
                callback_data="already_processed"
            ) if approved else InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω",
                callback_data="already_processed"
            )
        ],
        [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"tg://user?id={pending['tg_id']}")]
    ])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.edit_caption(
        caption=callback.message.caption + f"\n\nüßæ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' if approved else '‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω'}",
        reply_markup=new_keyboard
    )

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...
    if pending:
        uid = pending["tg_id"]
        username = pending.get("username") or str(uid)
        plan = pending["plan"]
        amount = pending["amount"]
        days_map = {
            50000: 30,
            120000: 90,
            220000: 180,
            400000: 365
        }
        days = days_map.get(amount, 30)

        if approved:
            if plan == "subscription":
                in_group = db.is_user_in_group(uid)
                new_end = db.add_or_update_user(uid, days=days, username=username, in_group=in_group)

                formatted_date = f"{new_end.day} {months[new_end.month - 1]} {new_end.year} –≥–æ–¥–∞ –≤ {new_end.strftime('%H:%M')}"

                if not in_group:
                    try:
                        token = secrets.token_urlsafe(6)
                        invite = await callback.bot.create_chat_invite_link(
                            chat_id=config.PRIVATE_GROUP_CHAT_ID,
                            name=f"invite_{uid}_{token}",
                            expire_date=int((datetime.utcnow() + timedelta(days=1)).timestamp()),
                            member_limit=1,
                        )
                        invite_link = invite.invite_link
                        db.set_user_in_group(uid, True)

                        await callback.bot.send_message(
                            uid,
                            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                            f"üéâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É:\n{invite_link}\n\n"
                            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {formatted_date}",
                            reply_markup=menu_keyboard
                        )

                        if config.ADMIN_ID:
                            await callback.bot.send_message(
                                config.ADMIN_ID,
                                f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–ª–∞—Ç—ë–∂ –æ—Ç @{username} (ID: {uid})\n"
                                f"üì¶ –ü–æ–¥–ø–∏—Å–∫–∞\n"
                                f"üìÖ –î–æ: {formatted_date}\n"
                                f"üîó –°—Å—ã–ª–∫–∞: {invite_link}"
                            )

                    except Exception as e:
                        await callback.bot.send_message(
                            uid,
                            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ú–∞—Å—Ç–µ—Ä–æ–º.",
                            reply_markup=support_keyboard
                        )
                        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è {uid}: {e}")
                else:
                    await callback.bot.send_message(
                        uid,
                        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\nüìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {formatted_date}",
                        reply_markup=menu_keyboard
                    )

            elif plan in ["consultation", "amulet"]:
                await callback.bot.send_message(
                    uid,
                    "‚ú® –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°–ø–∞—Å–∏–±–æ!\n"
                    "–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=menu_keyboard
                )
        else:
            await callback.bot.send_message(
                uid,
                "‚ùå –í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ú–∞—Å—Ç–µ—Ä–æ–º.",
                reply_markup=support_keyboard
            )

    await callback.answer(text)
    logger.info("Payment %s %s by admin", pid, action)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "already_processed")
async def handle_already_processed(callback: CallbackQuery):
    await callback.answer("–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)


# === –ö–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" ===
@router.callback_query(F.data == "back_offer")
async def back_offer(callback: CallbackQuery):
    await safe_edit_or_send(callback, offer_text, InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_offer:subscription")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]))


@router.callback_query(F.data == "back_main")
@router.message(Command("start"))
async def back_main(callback_or_message):
    text = "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    if isinstance(callback_or_message, CallbackQuery):
        await safe_edit_or_send(callback_or_message, text, main_menu)
    else:
        await callback_or_message.answer(text, reply_markup=main_menu)
