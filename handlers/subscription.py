from __future__ import annotations

from datetime import datetime, timedelta

import logging
import secrets

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import Command

import db
import config
from handlers.shared import offer_text
from keyboards import main_menu, subscription_menu, support_keyboard, menu_keyboard

router = Router()
logger = logging.getLogger(__name__)


async def safe_edit_or_send(callback: CallbackQuery, text: str, reply_markup):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å edit_text, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if callback.message and callback.message.text:
        try:
            await callback.message.edit_text(text=text, reply_markup=reply_markup)
        except Exception:
            await callback.message.answer(text=text, reply_markup=reply_markup)
    else:
        await callback.message.answer(text=text, reply_markup=reply_markup)
    await callback.answer()


# === –≠—Ç–∞–ø 1. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–µ ===
@router.callback_query(F.data == "buy_subscription")
async def buy_subscription_offer(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_offer:subscription")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    await safe_edit_or_send(callback, offer_text, kb)


@router.callback_query(F.data == "buy_consultation")
async def buy_consultation_offer(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_offer:consultation")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    await safe_edit_or_send(callback, offer_text, kb)


@router.callback_query(F.data == "buy_amulet")
async def buy_amulet_offer(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_offer:amulet")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    await safe_edit_or_send(callback, offer_text, kb)


# === –≠—Ç–∞–ø 2. –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –æ—Ñ–µ—Ä—Ç–æ–π ===
@router.callback_query(F.data.startswith("accept_offer"))
async def accept_offer(callback: CallbackQuery):
    try:
        _, service = callback.data.split(":", 1)
    except ValueError:
        service = "subscription"

    if service == "subscription":
        await safe_edit_or_send(callback, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:", subscription_menu)
        return

    if service == "consultation":
        text = (
            "üßò –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≤–∞–º–∏, —Ä–∞–∑–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>5000 —Ä—É–±</b>.\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ ‚Äî –ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏."
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚Äî 5000 —Ä—É–±",
                                  callback_data="create_pending:consultation:500000")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
        await safe_edit_or_send(callback, text, kb)
        return

    if service == "amulet":
        text = (
            "üîÆ –ê–º—É–ª–µ—Ç –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—Å.\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>2500 —Ä—É–±</b>.\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ ‚Äî –º–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –∞–º—É–ª–µ—Ç ‚Äî 2500 —Ä—É–±", callback_data="create_pending:amulet:250000")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
        await safe_edit_or_send(callback, text, kb)
        return


# === –≠—Ç–∞–ø 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (pending) ===
@router.callback_query(F.data.startswith("create_pending:"))
async def create_pending_handler(callback: CallbackQuery):
    try:
        _, plan, amount_s = callback.data.split(":", 2)
        amount = int(amount_s)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.", show_alert=True)
        return

    user = callback.from_user
    pid = db.create_pending_payment(user.id, user.username or user.first_name, plan, amount)
    logger.info("Created pending payment %s for user %s plan=%s amount=%s", pid, user.id, plan, amount)

    plan_text = (
        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if plan == "consultation"
        else "–ê–º—É–ª–µ—Ç" if plan == "amulet"
        else "–ü–æ–¥–ø–∏—Å–∫–∞"
    )

    rub = amount / 100
    text = (
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏: {plan_text}</b>\n\n"
        f"üí∞ –°—É–º–º–∞: {rub:.2f} —Ä—É–±.\n\n"
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
        "üîπ –°–±–µ—Ä–±–∞–Ω–∫: 1234 5678 9876 5432\n"
        "üîπ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: 5555 6666 7777 8888\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª."
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫", callback_data=f"attach_receipt:{pid}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

    await callback.message.answer(text=text, reply_markup=kb)
    await callback.answer("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚Äî –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫.")


# === –≠—Ç–∞–ø 4. –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —á–µ–∫–∞ ===
@router.callback_query(F.data.startswith("attach_receipt:"))
async def attach_receipt_prompt(callback: CallbackQuery):
    try:
        _, pid = callback.data.split(":", 1)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID –∑–∞—è–≤–∫–∏.")
        return

    db.set_receipt_waiting(callback.from_user.id, pid)
    await callback.message.answer(
        "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ–∫–æ–º.\n\n"
        "‚ùó –¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.",
        reply_markup=menu_keyboard
    )
    await callback.answer()


# === –≠—Ç–∞–ø 5. –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@router.message(F.photo | F.document)
async def handle_receipt_upload(message: Message):
    user_id = message.from_user.id
    pending = db.get_receipt_waiting(user_id)
    if not pending:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∂–¥—ë–º —á–µ–∫

    pid = pending["pid"]
    plan = pending["plan"]

    # –ü–æ–ª—É—á–∞–µ–º file_id
    file_id = message.photo[-1].file_id if message.photo else message.document.file_id

    db.save_receipt_file(pid, file_id)
    db.set_receipt_waiting(user_id, None)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    kb_admin = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{pid}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{pid}")
        ],
        [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"tg://user?id={user_id}")]
    ])

    plan_text = (
        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if plan == "consultation"
        else "–ê–º—É–ª–µ—Ç" if plan == "amulet"
        else "–ü–æ–¥–ø–∏—Å–∫–∞"
    )

    await message.bot.send_photo(
        config.ADMIN_ID,
        photo=file_id,
        caption=f"üí∞ –ù–æ–≤—ã–π —á–µ–∫ –ø–æ –∑–∞—è–≤–∫–µ #{pid}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.first_name}\n"
                f"üí´ –£—Å–ª—É–≥–∞: {plan_text}",
        reply_markup=kb_admin
    )

    await message.answer(
        "‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
        reply_markup=menu_keyboard
    )


# === –≠—Ç–∞–ø 6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) ===
@router.callback_query(F.data.startswith("approve:") | F.data.startswith("reject:"))
async def handle_admin_decision(callback: CallbackQuery):
    try:
        action, pid = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ ID.", show_alert=True)
        return

    approved = action == "approve"
    db.set_payment_status(pid, "approved" if approved else "rejected")

    text = (
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω." if approved
        else "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω."
    )

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
    await callback.message.edit_caption(
        caption=callback.message.caption + f"\n\nüßæ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' if approved else '‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω'}",
        reply_markup=callback.message.reply_markup
    )

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pending = db.get_payment(pid)
    if pending:
        uid = pending["tg_id"]
        username = pending.get("username") or str(uid)
        plan = pending["plan"]

        if approved:
            if plan == "subscription":
                # –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å payment.py
                days = 30  # –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å: —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ä–æ–∫ —Ç–∞—Ä–∏—Ñ–∞ –≤ pending
                in_group = db.is_user_in_group(uid)
                new_end = db.add_or_update_user(uid, days=days, username=username, in_group=in_group)

                months = [
                    '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                    '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
                ]
                formatted_date = f"{new_end.day} {months[new_end.month - 1]} {new_end.year} –≥–æ–¥–∞ –≤ {new_end.strftime('%H:%M')}"

                if not in_group:
                    try:
                        token = secrets.token_urlsafe(6)
                        invite = await callback.bot.create_chat_invite_link(
                            chat_id=config.PRIVATE_GROUP_CHAT_ID,
                            name=f"invite_{uid}_{token}",
                            expire_date=int((datetime.utcnow() + timedelta(days=1)).timestamp()),
                            member_limit=1,
                        )
                        invite_link = invite.invite_link
                        db.set_user_in_group(uid, True)

                        await callback.bot.send_message(
                            uid,
                            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                            f"üéâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É:\n{invite_link}\n\n"
                            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {formatted_date}",
                            reply_markup=menu_keyboard
                        )

                        if config.ADMIN_ID:
                            await callback.bot.send_message(
                                config.ADMIN_ID,
                                f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–ª–∞—Ç—ë–∂ –æ—Ç @{username} (ID: {uid})\n"
                                f"üì¶ –ü–æ–¥–ø–∏—Å–∫–∞\n"
                                f"üìÖ –î–æ: {formatted_date}\n"
                                f"üîó –°—Å—ã–ª–∫–∞: {invite_link}"
                            )

                    except Exception as e:
                        await callback.bot.send_message(
                            uid,
                            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ú–∞—Å—Ç–µ—Ä–æ–º.",
                            reply_markup=support_keyboard
                        )
                        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è {uid}: {e}")
                else:
                    await callback.bot.send_message(
                        uid,
                        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\nüìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {formatted_date}",
                        reply_markup=menu_keyboard
                    )

            elif plan in ["consultation", "amulet"]:
                await callback.bot.send_message(
                    uid,
                    "‚ú® –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°–ø–∞—Å–∏–±–æ!\n"
                    "–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=menu_keyboard
                )
        else:
            await callback.bot.send_message(
                uid,
                "‚ùå –í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ú–∞—Å—Ç–µ—Ä–æ–º.",
                reply_markup=support_keyboard
            )

    await callback.answer(text)
    logger.info("Payment %s %s by admin", pid, action)


# === –ö–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" ===
@router.callback_query(F.data == "back_offer")
async def back_offer(callback: CallbackQuery):
    await safe_edit_or_send(callback, offer_text, InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_offer:subscription")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]))


@router.callback_query(F.data == "back_main")
@router.message(Command("start"))
async def back_main(callback_or_message):
    text = "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    if isinstance(callback_or_message, CallbackQuery):
        await safe_edit_or_send(callback_or_message, text, main_menu)
    else:
        await callback_or_message.answer(text, reply_markup=main_menu)
