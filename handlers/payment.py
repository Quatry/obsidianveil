import secrets

from aiogram import Router, F, Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import config
from db import get_pending_by_user, set_pending_status, add_or_update_user, set_user_in_group

router = Router()


@router.callback_query(F.data == "attach_receipt")
async def attach_receipt_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–∞–π–ª —á–µ–∫–∞. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
    )
    await callback.answer()


@router.message(F.photo | F.document)
async def receive_receipt(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    caption = f"üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –ø—Ä–∏—Å–ª–∞–ª —á–µ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{user_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")
            ]
        ]
    )

    try:
        if message.photo:
            file_id = message.photo[-1].file_id
            await bot.send_photo(chat_id=config.ADMIN_ID, photo=file_id, caption=caption, reply_markup=keyboard)
        elif message.document:
            await bot.send_document(chat_id=config.ADMIN_ID, document=message.document.file_id, caption=caption,
                                    reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–∞–π–ª —á–µ–∫–∞.")
            return

        await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–º –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –¥–æ—Å—Ç—É–ø.")

    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        if config.ADMIN_ID:
            await bot.send_message(config.ADMIN_ID, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –æ—Ç @{username}: {e}")


@router.callback_query(F.data.startswith("accept:"))
async def accept_payment(callback: types.CallbackQuery, bot: Bot):
    user_id = int(callback.data.split(":")[1])

    pending = get_pending_by_user(user_id)
    if not pending:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer("–û—à–∏–±–∫–∞")
        return

    plan = pending['plan']
    days = 30 if plan == 'month' else 365

    set_pending_status(pending['id'], 'confirmed', admin_id=callback.from_user.id)

    new_end = add_or_update_user(user_id, days=days, username=pending['username'], in_group=False)

    months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
              '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
    formatted_date = f"{new_end.day} {months[new_end.month - 1]} {new_end.year} –≥–æ–¥–∞ –≤ {new_end.strftime('%H:%M')}"

    try:
        token = secrets.token_urlsafe(6)
        invite = await bot.create_chat_invite_link(
            chat_id=config.PRIVATE_GROUP_CHAT_ID,
            name=f"invite_{user_id}_{token}",
            expire_date=int((datetime.utcnow() + timedelta(days=1)).timestamp()),
            member_limit=1
        )
        invite_link = invite.invite_link

        set_user_in_group(user_id, True)

        await bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            "üéâ –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É:\n"
            f"{invite_link}\n\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {formatted_date}\n\n"
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞."
        )

        if config.ADMIN_ID:
            await bot.send_message(
                config.ADMIN_ID,
                f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç @{pending['username']} (ID: {user_id})\n"
                f"üì¶ –¢–∞—Ä–∏—Ñ: {'1 –º–µ—Å—è—Ü' if plan == 'month' else '1 –≥–æ–¥'}\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {formatted_date}\n"
                f"üîó –ò–Ω–≤–∞–π—Ç: {invite_link}"
            )

    except Exception as e:
        await bot.send_message(user_id,
                               "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                               )
        if config.ADMIN_ID:
            await bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç–∞ –¥–ª—è {user_id}: {e}")

    await callback.message.edit_reply_markup(None)
    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç.")


@router.callback_query(F.data.startswith("reject:"))
async def reject_payment(callback: types.CallbackQuery, bot: Bot):
    user_id = int(callback.data.split(":")[1])

    pending = get_pending_by_user(user_id)
    if pending:
        set_pending_status(pending['id'], 'rejected', admin_id=callback.from_user.id)

    await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

    await callback.message.edit_reply_markup(None)
    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
