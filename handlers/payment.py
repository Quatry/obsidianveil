from __future__ import annotations

import logging
import secrets
from datetime import datetime, timedelta

from aiogram import Router, F, Bot
from aiogram.types import Message, PreCheckoutQuery

import config
import db

router = Router()
logger = logging.getLogger(__name__)


@router.pre_checkout_query()
async def pre_checkout_handler(query: PreCheckoutQuery):
    await query.answer(ok=True)


@router.message(F.successful_payment)
async def successful_payment_handler(message: Message, bot: Bot):
    payload = message.successful_payment.invoice_payload
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    in_group = db.is_user_in_group(user_id)

    days = 30 if payload == "month_subscription" else 365
    new_end = db.add_or_update_user(user_id, days=days, username=username, in_group=in_group)

    months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è',
              '–¥–µ–∫–∞–±—Ä—è']
    formatted_date = f"{new_end.day} {months[new_end.month - 1]} {new_end.year} –≥–æ–¥–∞ –≤ {new_end.strftime('%H:%M')}"

    logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç {username or user_id}, payload={payload}")

    if not in_group:
        try:
            token = secrets.token_urlsafe(6)
            invite = await bot.create_chat_invite_link(
                chat_id=config.PRIVATE_GROUP_CHAT_ID,
                name=f"invite_{user_id}_{token}",
                expire_date=int((datetime.utcnow() + timedelta(days=1)).timestamp()),
                member_limit=1,
            )
            invite_link = invite.invite_link

            db.set_user_in_group(user_id, True)

            await message.answer(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                "üéâ –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É:\n"
                f"{invite_link}\n\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {formatted_date}\n\n"
                "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞."
            )

            if config.ADMIN_ID:
                await bot.send_message(
                    config.ADMIN_ID,
                    f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç @{username} (ID: {user_id})\n"
                    f"üì¶ –¢–∞—Ä–∏—Ñ: {'1 –º–µ—Å—è—Ü' if payload == 'month_subscription' else '1 –≥–æ–¥'}\n"
                    f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {formatted_date}\n"
                    f"üîó –ò–Ω–≤–∞–π—Ç: {invite_link}"
                )

        except Exception as e:
            await message.answer(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            if config.ADMIN_ID:
                await bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç–∞ –¥–ª—è {user_id}: {e}")

    else:
        # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ
        await message.answer(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞.\n\n"
            f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {formatted_date}\n\n"
            "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ."
        )
