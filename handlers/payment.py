from __future__ import annotations

import logging
import secrets
from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, PreCheckoutQuery

import config
import db
from keyboards import menu_keyboard, support_keyboard

router = Router()
logger = logging.getLogger(__name__)

PAYMENT_NAMES = {
    "month_subscription": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",
    "year_subscription": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥",
    "consultation_payment": "–û–ø–ª–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
    "amulet_payment": "–û–ø–ª–∞—Ç–∞ –∞–º—É–ª–µ—Ç–∞"
}


@router.pre_checkout_query()
async def pre_checkout_handler(query: PreCheckoutQuery):
    await query.answer(ok=True)


@router.message(F.successful_payment)
async def successful_payment_handler(message: Message, bot: Bot):
    payload = message.successful_payment.invoice_payload
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    payment_name = PAYMENT_NAMES.get(payload, payload)

    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç {username} ({user_id}) ‚Äî {payment_name}")

    if payload in ["month_subscription", "year_subscription"]:
        days = 30 if payload == "month_subscription" else 365
        in_group = db.is_user_in_group(user_id)
        new_end = db.add_or_update_user(user_id, days=days, username=username, in_group=in_group)

        months = [
            '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
            '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
        ]
        formatted_date = f"{new_end.day} {months[new_end.month - 1]} {new_end.year} –≥–æ–¥–∞ –≤ {new_end.strftime('%H:%M')}"

        if not in_group:
            try:
                token = secrets.token_urlsafe(6)
                invite = await bot.create_chat_invite_link(
                    chat_id=config.PRIVATE_GROUP_CHAT_ID,
                    name=f"invite_{user_id}_{token}",
                    expire_date=int((datetime.utcnow() + timedelta(days=1)).timestamp()),
                    member_limit=1,
                )
                invite_link = invite.invite_link
                db.set_user_in_group(user_id, True)

                await message.answer(
                    f"‚úÖ {payment_name} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üéâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É:\n{invite_link}\n\n"
                    f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {formatted_date}",
                    reply_markup=menu_keyboard
                )

                if config.ADMIN_ID:
                    await bot.send_message(
                        config.ADMIN_ID,
                        f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç @{username} (ID: {user_id})\n"
                        f"üì¶ {payment_name}\n"
                        f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {formatted_date}\n"
                        f"üîó –°—Å—ã–ª–∫–∞: {invite_link}"
                    )

            except Exception as e:
                await message.answer(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ú–∞—Å—Ç–µ—Ä–æ–º.",
                    reply_markup=support_keyboard
                )
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}")
        else:
            await message.answer(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\nüìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {formatted_date}",
                reply_markup=menu_keyboard
            )

    elif payload in ["consultation_payment", "amulet_payment"]:
        await message.answer(
            f"‚úÖ {payment_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!\n\n"
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=menu_keyboard
        )
        if config.ADMIN_ID:
            await bot.send_message(
                config.ADMIN_ID,
                f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂: {payment_name}\n"
                f"–û—Ç @{username} (ID: {user_id})",
            )
